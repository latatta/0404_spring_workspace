스프링 모듈(라이브러리) 중 사용한 것은
: spring-core  		-> 스프링 컨테이너
: spring-context	-> 스프링 컨테이너에 접근

스프링 Bean(빈) 이란
:스프링 컨테이너가 생성하고 관리하는 객체

스프링 컨테이너란
:스프링 bean의 생성과 소멸(life cycle)을 관리한다.
:스프링 컨테이너로부터 필요한 bean 을 가져와 사용한다.

ClassPathXmlApplicationContext 클래스는
: ApplicationContext 인터페이스의 구현체
: ApplicationContext는 BeanFactory 인터페이스의 확장 
: 스프링 컨테이너에서 bean을 생성하기 위해 xml 파일을 지정해야 합니다.

스프링 DI 
:클래스간의 의존관계를 bean 설정정보를 이용하여 자동으로 의존관계를 주입. 스프링 컨테이너가 동작하여 실행함.
:객체간의 의존관계는 (1)xml 설정파일 또는 (2)**어노테이션**을 이용
--------------------- 어제 공부한 용어 정리 여기까지 입니다. ---------------------

1. 자바 인터페이스 복습

	실습 내용 : day2.review 패키지
	클래스 의존관계  :	사용자 요청(main메소드) => controller -> service -> dao
							      	
 	*클래스의 의존관계를 나타내는 클래스의 프로퍼티를 인터페이스 타입으로 한것은 
 	 그 인터페이스의 구현체 클래스를 주입할수 있다는 것입니다.
	*개발 또는 실행과정에서 실행환경의 변화 또는 로직의 테스트 등을 위해서 주입되는 클래스를 변경해야하는 
	 상황이 발생할수 있습니다. 기존 방식은 소스 코드에서 주입되는 객체를 변경해야합니다. 
	 그래서 스프링은 소스코드에서가 아닌 스프링 관리하는 방식의 의존관계 주입을 합니다.

2. bean 설정으로 의존관계 주입 복습 : day2.review 패키지
	- 실행은 SpringApp3.java

3. 어노테이션 설정으로 의존관계 주입 실습 : day2.annot 패키지
	- 실행은 SpringApp4.java


///어노테이션///
정의 : 컴파일러 또는 실행시에 특정목적의 정보를 제공한다.(사전적인 의미 : 주석)
-컴파일러에게 코드 작성 문법 에러를 체크하도록 정보를 제공  :@Override
-소프트웨어 개발툴이 빌드시 코드를 자동으로 생성할 수 있도록 정보 제공 : 롬복 어노테이션 @Setter
-실행시(런타임시)특정 기능을 실행하도록 정보를 제공 : @Component

///Annotation 기반의 개발///
XML 파일에서 명시적으로 빈을 설정하는 부분을 대신합니다.
XML 의 bean 정의 개념을 바탕으로 annotation을 이해합시다..

///JSR 250/// 
어노테이션 라이브러리의 규격 이름. 기본적으로 사용할 수 있는 규격이름.
@Component : spring bean 정의. 역할에 따라 아래와 같은 다른 어노테이션을 사용한다.
          @Controller : 컨트롤러
          @Service    : 서비스
          @Repository : DAO
JSR 330 어노테이션은 같은 동작을 하는 것이외에 더 많은 기능을 포함. 별도의 라이브러리 필요.

-어노테이션으로 bean을 생성할때 , 패키지 범위 설정필요.-> xml 파일에 1줄 작성.

///실습내용///
1. @Component 로 빈생성 확인하기
	-> bean id는 자동으로 만들어집니다.클래스 이름에 첫글자 소문자로 바꾸어서 만들어집니다.
	-> bean id는 value속성으로 지정할수도 있습니다.
2. @Autowired : 의존관계 자동 주입. 해당되는 타입의 객체가 1개일때만
	-> 커스텀생성자 의존관계 주입시 생략할수 있음.
	-> 프로퍼티 변수 선언에서 사용할때에는 기본생성자가 동작해야함.
	-> setter 메소드에서 사용할때에는 기본생성자가 동작해야함.
3. @Qualifier : 자격자. @Autowired 함께 사용하며 의존관계 주입 bean 이름을 직접 설정


/////// 참고 //////
@Autowired 는 프로퍼티변수선언,생성자,메소드에서 의존관계를 주입할 수 있다.
		-> *byType* 으로 주입한다.
    	 	-> 주입할 bean 이 없으면 오류가 발생한다.
@Component로 bean을 생성할 때에는  사용할 떄에는 기본생성자 -> 커스텀 생성자 순서로 생성한다.
  		-> 이 때 @Autowired를 만나면 해당 빈을 먼저 생성하여 주입한다.

@Qualifier(value="bean 이름")	는 
  		-> @Autowired 로 주입 시킬 타입의 bean이 여러개일 때 빈의 이름을 지정한다.
		-> 프로퍼티변수선언,생성자,setter메소드 에 사용할 수 있다.
  
@Autowired(required = false) 는 주입할 빈이 없을 때 오류 발생하지 않는다.
  

  *결론 : 추천 
   대부분의 의존관계 주입은 한 번 일어나면 애플리케이션 종료시점까지 의존관계를 변경하지 않는다.
   bean 을 주입할 프로퍼티변수는 final로 선언하고 , *커스텀 생성자 주입*을 사용한다.
///////



