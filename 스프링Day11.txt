[[주제1 : Interceptor]]

클라이언트요청(request)
	|

Filter (doFilter()메소드)		web.xml에서 설정(예시,문자인코딩설정)
	
	|
Dispatcher Servlet		FrontController, web.xml에서 설정
	|
Interceptor , 가로채기 (preHandle)	servlet-context.xml에서설정
				여러개 인터셉터를 동작시킬수 있다.
	|
Controller (postHandle) ::메소드 매핑 (메소드 실행 전후에 처리될 반복될 동작들?)
	|
Interceptor (afterCompletion)
	|
DispatcherServlet
	|
Filter
	|
클라이언트 응답(response)


*스프링에는 AOP (spring-aop) 
: 컨트롤러 뿐만아니 서비스(비지니스로직)에서도 적용될수있다.
----------------------------------------------

[실습내용]
1. servlet-context.xml

<!-- 인터셉터 구현체를 빈으로 등록 -->
	<beans:bean id="testInterceptor" 
			class="com.mycompany.idev.interceptor.TestInterceptor"/>
	<!-- 인터셉터의 동작 범위를 설정-->
	<interceptors>
		<interceptor>
			<mapping path="/**/**"/>   
			<!-- 적용될 url(경로) , 2단계 하위 디렉토리로 설정, *기호 모든 이름에 대해-->
			<beans:ref bean="testInterceptor"/>		
		</interceptor>
	</interceptors>	


2. 인터셉터 구현체 생성
public class TestInterceptor implements HandlerInterceptor {
}	

ㄴ preHandle, postHandle , afterCompletion 메소드 3개는 각각 다른 시점에 동작합니다.
   : 인터페이스의 디폴트 메소드이며 반드시 구현해야하는 추상메소드가 아닙니다.
 	       필요한 경우에만 정의하는 디폴트 메소드입니다.
ㄴ 위의 메소드는 모두 request,response 를 인자로 전달받습니다.(request, response 객체를 가로채기 후 변경가능)
ㄴ postHandle은 ModelAndView (Model 객체와 view ) , 
  afterCompletion는 Exception이 발생할 경우 예외 정보 객체를 인자로 전달 받습니다.
ㄴ preHandle은 리턴타입이 boolean : 리턴을 false 로하면 정해진 핸들러매핑메소드가 취소됩니다.


3. 인증 , 인가
인증 authentication  : 사용자를 확인하는 로그인. 
인가 authorization   : 확인된 사용자의 사용범위를 허가. 예를 들면, 일반사용자와 관리자


ㄴ 인증 및 인가 작업으로 preHandle 메소드에 로그인이 필요한 url에 대한 검사를 할수 있습니다.
    --> 매핑되는 url을 변경합니다.




[[주제2 : RedirectAttributes]]

addAttribute 메소드 : Model 의 동작과 동일
addFlashAttribute  : post mapping 메소드에서 redirect 할때
		    url에 표시하지 않으면서 데이터를 redirect url의 view에 전달
		--> 글 추가,글 수정, 글 삭제 후 완료 메시지 전달하는 방법으로 활용하였습니다.



[[주제3 : 오류처리]] - 프로젝트 하면서 검색해서 적용해보세요.

1. web.xml에서 <error-page>로 하기 : 404, 500 오류 코드에 대해 처리

2. Controller에서 @ExceptionHandler 으로 특정 Exception에 대해서 처리하기


/////////////////////////
내일의 마지막 진도 내용 : ajax(비동기통신) -> 자바스크립트, spring REST 서비스